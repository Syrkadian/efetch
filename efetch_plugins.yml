###
# Efetch Plugin file
#
# Each item in this file becomes an efetch_server plugin
#
# Below is a simple example, note only the name field is required
#
#   office:
#       name: "Adv. Preview"
#       description: List the strings   # Optional
#       cache: True                     # Defaults to True, so not necessary
#       popularity: 2                   # Defaults to 5, changes list order, 0 is hidden
#       os:                             # Defaults to all, list of supported operating systems (Windows and Linux)
#           - linux
#       mimetypes:                      # Defaults to all, list of supported mimetypes
#			      - application/mspowerpoint
#			      - application/vnd.ms-works
#           ...
#           - text/rtf
#       extensions:                     # Defaults to all, list of supported file extensions
#           - ppt
#           - pptx
#           ...
#           - docx
#       command: "unoconv -f pdf -o '{{ file_cache_path }}.pdf' '{{ file_cache_path }}' "
#		file: "{{ file_cache_path }}.pdf"
#
# The COMMAND and FILE options use JINJA2 templating
#
# There is also a "store" option that takes the variable to store the results to e.g.:
#     store: 'strings'
#
# There is also a "openwith" option that opens the specified "file" with a given plugin
#     openwith: 'directory'
#
# If no FILE is specified, the plugin returns the results of the command using <xmp>
###

cleanjson:
  name: Clean JSON
  icon: fa-file-text-o
  os: [ 'linux' ]
  extensions: [ 'json' ]
  command: "cat '{{ file_cache_path }}' | python -m json.tool"

#corexml:
#  name: Core.xml
#  icon: fa-file-code-o
#  os: [ 'linux' ]
#  extensions: [ 'pptx', 'xlsx', 'docx' ]
#  command: "unzip -qc '{{ file_cache_path }}' docProps/core.xml | xmllint --format  -"

#cleanxml:
#  name: Clean XML
#  icon: fa-file-code-o
#  os: [ 'linux' ]
#  mimetypes: [ 'application/xml' ]
#  command: "cat '{{ file_cache_path }}' | xmllint --format --recover -"

#pdftotext:
#  name: pdftotext
#  icon: fa-file-pdf-o
#  os: [ 'linux' ]
#  mimetypes: [ 'application/pdf' ]
#  command: "pdftotext '{{ file_cache_path }}' -"

#readpst:
#  name: Read PST
#  icon: fa-envelope
#  popularity: 4
#  os: [ 'linux' ]
#  extensions: [ 'pst' ]
#  command: "mkdir {{ file_cache_path }}_readpst; readpst -w -D -S -o '{{ file_cache_path }}_readpst' {{ file_cache_path }}"
#  file: "{{ file_cache_path }}_readpst"
#  openwith: directory

#unzip:
#  name: Cache Unzip
#  popularity: 4
#  icon:  fa-file-archive-o
#  os: [ 'linux' ]
#  mimetypes: [ 'application/zip' ]
#  command: "unzip -u '{{ file_cache_path }}' -d '{{ file_cache_path }}_unzip'"
#  file: "{{ file_cache_path }}_unzip"
#  openwith: directory

#strings:
#  name: String
#  icon: fa-file-text
#  os: [ 'linux' ]
#  store: 'strings_bash'
#  command: "strings '{{ file_cache_path }}'"

#ziplist:
#  name: ZIP List
#  icon: fa-archive
#  os: [ 'linux' ]
#  mimetypes: [ 'application/zip' ]
#  command: "unzip -l '{{ file_cache_path }}'"

#file:
#  name: File
#  os: [ 'linux' ]
#  store: 'file_bash'
#  command: "file -b '{{ file_cache_path }}'"

#virus_total:
#  name: Virus Total
#  icon: fa-bug
#  os: [ 'linux' ]
#  command: "virustotal-search.py -m '{{ file_cache_path }}'"

#pdfocr:
#  name: PDF OCR
#  icon: fa-file-pdf-o
#  cache: True
#  popularity: 4
#  os: [ 'linux' ]
#  mimetypes: [ 'application/pdf' ]
#  command: "pypdfocr '{{ file_cache_path }}'"
#  file: "{{ file_cache_dir }}*_ocr.pdf"

#clamscan:
#  name: Clam Scan
#  icon: fa-bug
#  os: [ 'linux' ]
#  command: "clamscan '{{ file_cache_path }}'"